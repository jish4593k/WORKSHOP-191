
import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
import seaborn as sns
from tkinter import Tk, Label, Button
from tkinter import filedialog

# Function to load data interactively using Tkinter GUI
def load_data_gui():
    root = Tk()
    root.title("Data Loading GUI")

    file_path = filedialog.askopenfilename(title="Select CSV file", filetypes=[("CSV files", "*.csv")])

    if file_path:
        data = pd.read_csv(file_path)
        root.destroy()
        return data
    else:
        root.destroy()
        return None


def analyze_data(data):
    
    data.drop("Luminosity", axis=1, inplace=True)

   \
    data.to_csv("main.csv", index=False)

  
    print("Column names:", data.columns)

    final_data = data.dropna().reset_index(drop=True)

    final_data.to_csv('final_data.csv', index=False)

   
    print("Descriptive Statistics:")
    print(final_data.describe())

    
    print("First 5 rows:")
    print(final_data.head())

    # Perform regression using TensorFlow and Keras
    X = final_data.drop("Radius", axis=1)  # Features
    y = final_data["Radius"]  # Target

    # Split the data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    model = tf.keras.Sequential([
        tf.keras.layers.Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
        tf.keras.layers.Dense(1)
    ])

   
    model.compile(optimizer='adam', loss='mean_squared_error')

  
    model.fit(X_train_scaled, y_train, epochs=50, batch_size=32, validation_split=0.2, verbose=0)

    
    predictions = model.predict(X_test_scaled)
    mse = mean_squared_error(y_test, predictions)
    print(f'Mean Squared Error: {mse}')

    plt.figure(figsize=(10, 6))
    sns.scatterplot(x=y_test, y=predictions.flatten())
    plt.title('Actual vs. Predicted Radius')
    plt.xlabel('Actual Radius')
    plt.ylabel('Predicted Radius')
    plt.show()


def main():
    print('Welcome to Advanced Data Analysis')


    data = load_data_gui()

    if data is not None:
      
        analyze_data(data)

if __name__ == "__main__":
    main()
